---
3 state kinetics->(x,tR):
  code: >
    def g(
      k12 = 2,
      k13 = 0,
      k21 = 2,
      k23 = 0,
      k31 = 0,
      k32 = 0
    ):
      K = np.array(
        [
          [-(k12+k13), k21, k31],
          [k12, -(k23+k21), k32],
          [k13, k23, -(k31+k32)]
        ]
      )

      eigen_val, eigen_vec = np.linalg.eig(K)
      idx = abs(eigen_val).argsort()[::]
      eigen_val = eigen_val[idx]
      eigen_vec = eigen_vec[:,idx].T

      v0 = eigen_vec[0]

      # Prevent division by zero when calculating population fractions
      v0_sum = v0.sum()
      if abs(v0_sum) < 1e-10:
        # If sum is too close to zero, use equal populations
        x1, x2, x3 = 1/3, 1/3, 1/3
      else:
        x1, x2, x3 = v0 / v0_sum

      # Prevent division by zero when calculating relaxation times
      ie = np.zeros_like(eigen_val)
      for i, val in enumerate(eigen_val):
        if abs(val) < 1e-10:
          ie[i] = float('inf')  # Infinite relaxation time for zero eigenvalue
        else:
          ie[i] = -1.0 / val

      tR0, tR1, tR2 = ie[::-1]
      
      r = {
        'x1': x1,
        'x2': x2,
        'x3': x3,
        'tR0': tR0,
        'tR1': tR1
      }
    
      return r

  initial:
    k12:
      value: 1.0
      bounds: [0.0, 1e6]
    k13:
      value: 0.0
      bounds: [0.0, 1e6]
    k21:
      value: 1.0
      bounds: [0.0, 1e6]
    k23:
      value: 1.0
      bounds: [0.0, 1e6]
    k31:
      value: 0.0
      bounds: [0.0, 1e6]
    k32:
      value: 1.0
      bounds: [0.0, 1e6]
  description: "3-state kinetics -> relaxation times, population fractions"
FRET to PDA:
  code: >
    def g(
      E = 0.5,
      a = 0.02,
      gp = 0.32,
      phiA = 0.32,
      phiD = 0.92
    ):
      # Add a small epsilon to prevent division by zero
      epsilon = 1e-10

      # Prevent division by zero for phiD and gp
      safe_phiD = max(phiD, epsilon)
      safe_gp = max(gp, epsilon)

      # Prevent division by zero when E is close to 1
      safe_term = phiA/safe_phiD / safe_gp * E / (max(1 - E, epsilon))

      # Calculate the result
      e = 1. - 1. / (1 + safe_term + a) 

      r = {
        'p0': e
      }
    
      return r

  initial:
    E:
      value: 0.5
      bounds: [0.0, 1.0]
    a:
      value: 0.02
      bounds: [0.0, 1.0]
    gp:
      value: 0.32
      bounds: [0.0, 100.0]
    phiA:
      value: 0.32
      bounds: [0.0, 1.0]
    phiD:
      value: 0.92
      bounds: [0.0, 1.0]
  description: "FRET eff -> PDA p0"
2 state kinetics->(x,tR):
  code: >
    def g(k12, k21):
      # Prevent division by zero
      denominator = k12 + k21
      if abs(denominator) < 1e-10:
        # If denominator is too close to zero, return default values
        return {
          'tR': 1e9,  # "Infinite" relaxation time
          'x1': 0.5,  # Equal populations
          'x2': 0.5
        }

      return {
        'tR': 1. / denominator,
        'x1': k21 / denominator,
        'x2': k12 / denominator   
      }
  initial:
    k12:
      value: 1.0
      bounds: [0.0, 1e6]
    k21:
      value: 0.5
      bounds: [0.0, 1e6]
  description: "2-state kinetics -> relaxation times, population fractions"
Gauss->FRET efficiency:
  code: >
    def g(RDA, sDA, k, R0):
        from chisurf.fluorescence.general import distance_to_fret_efficiency
        from chisurf.math.functions.distributions import generalized_normal_distribution
        x = np.linspace(0, 256, 256)
        f = distance_to_fret_efficiency(x, R0)
        y = generalized_normal_distribution(x, RDA, sDA, k)

        # Prevent division by zero
        y_sum = np.sum(y)
        if abs(y_sum) < 1e-10:
            # If sum is too close to zero, return default value
            fret_efficiency = 0.5  # Default FRET efficiency
        else:
            fret_efficiency = f @ y / y_sum

        return {
            'E': fret_efficiency
        }
  initial:
    RDA:
      value: 45.0
      bounds: [0.0, 128]
    sDA:
      value: 6.0
      bounds: [0.0, 20.0]
    k:
      value: 0.0
      bounds: [-10.0, 10.0]
    R0:
      value: 52.0
      bounds: [0.0, 100.0]
  description: "Compute FRET efficiency for generalized Gaussian (with skew, k)"